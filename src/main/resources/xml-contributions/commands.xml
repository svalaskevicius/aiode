<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<commands xmlns="commandSpace">
  <command identifier="add"
           implementation="net.robinfriedli.aiode.command.commands.playlistmanagement.AddCommand"
           requiresInput="true"
           category="PLAYLIST_MANAGEMENT"
           description="Add a specific song from spotify, youtube, the current queue or any URL to the specified local playlist. Which source is used is decided by the used arguments or the default source and default list source properties. Spotify search queries support the Spotify query syntax (i.e. the &quot;artist:&quot;, &quot;album:&quot; and &quot;track:&quot; filters). To add tracks to the queue see the queue command.">
    <argument identifier="to" valueType="java.lang.String" description="Mandatory argument to define the playlist to which you want to add the tracks."/>
    <argument identifier="queue" description="Add items from the current queue to the specified playlist. The to argument may be dropped when using this argument. E.g. add %2$squeue my list.">
      <excludes argument="youtube"/>
      <excludes argument="spotify"/>
    </argument>
    <example title="Add a specific track">%1$sadd %2$sspotify %2$sown from the inside %2$sto my list.</example>
    <example title="Add tracks from the current queue to a list">%1$sadd %2$squeue my list</example>
    <example title="Add tracks from a url">%1$sadd http://someurl.com %2$sto linkin park</example>
  </command>
  <command identifier="answer"
           implementation="net.robinfriedli.aiode.command.commands.general.AnswerCommand"
           requiresInput="true"
           category="GENERAL"
           description="Answer a question asked by the bot. Commands like the play command may ask you to specify what track you meant if several options where found.">
    <example title="Choose option with key 2">%1$sanswer 2</example>
    <example title="Choose options 2, 4 and 6">%1$sanswer 2,4,6</example>
  </command>
  <command identifier="create"
           implementation="net.robinfriedli.aiode.command.commands.playlistmanagement.CreateCommand"
           requiresInput="true"
           category="PLAYLIST_MANAGEMENT"
           description="Create an empty local playlist with the given name.">
    <example title="Create a playlist called &quot;my list&quot;">%1$screate my list</example>
  </command>
  <command identifier="delete"
           implementation="net.robinfriedli.aiode.command.commands.playlistmanagement.DeleteCommand"
           requiresInput="true"
           category="PLAYLIST_MANAGEMENT"
           description="Delete the local playlist with the given name.">
    <example title="Delete a playlist called &quot;my list&quot;">%1$sdelete my list</example>
  </command>
  <command identifier="export"
           implementation="net.robinfriedli.aiode.command.commands.playlistmanagement.ExportCommand"
           requiresInput="true"
           category="PLAYLIST_MANAGEMENT"
           description="Export the current tracks in the queue to a new local list.">
    <example title="Create a playlist called &quot;my list&quot; with tracks from the current queue">%1$sexport my list
    </example>
  </command>
  <command identifier="help"
           implementation="net.robinfriedli.aiode.command.commands.general.HelpCommand"
           requiresInput="false"
           category="GENERAL"
           description="Lists all available commands and their descriptions or provides help with a specific command.">
    <example title="Get help with the play command">%1$shelp play</example>
  </command>
  <!-- <command identifier="login" -->
  <!--          implementation="net.robinfriedli.aiode.command.commands.spotify.LoginCommand" -->
  <!--          requiresInput="false" -->
  <!--          category="SPOTIFY" -->
  <!--          description="Login to spotify. This sends you a link to the spotify login page which then redirects to the aiode callback."> -->
  <!--   <example title="Login to Spotify.">%1$slogin</example> -->
  <!-- </command> -->
  <command identifier="play"
           implementation="net.robinfriedli.aiode.command.commands.playback.PlayCommand"
           requiresInput="false"
           category="PLAYBACK"
           description="Resume the paused playback, play the current track in the queue or play the specified track, video or playlist. Can play any URL or search youtube and spotify tracks or lists and also local playlists. Local playlists, like the queue, can contain tracks from any source (YouTube, Spotify and URL). Spotify search queries support the Spotify query syntax (i.e. the &quot;artist:&quot;, &quot;album:&quot; and &quot;track:&quot; filters). Which source is used is decided by the used arguments or the default source and default list source properties.">
    <example title="Play the current queue or unpause playback">%1$splay</example>
    <example title="Play a specific track from Spotify">%1$splay numb</example>
    <example title="Play a track from a specific artist and album">%1$splay from the inside artist:linkin park album:meteora</example>
    <example title="Play a URL">%1$splay someurl.com</example>
    <example title="Play a video from YouTube">%1$splay %2$syoutube youtube rewind 2018</example>
    <example title="Play a playlist from YouTube, showing a selection of 5 results">%1$splay %2$syoutube %2$slist %2$slimit=5 memes</example>
    <example title="Play a YouTube playlist">%1$splay %2$syoutube %2$slist important videos</example>
    <example title="Play a Spotify playlist">%1$splay %2$sspotify %2$slist this is linkin park</example>
    <example title="Play a Spotify playlist from the current user's library">%1$splay %2$sspotify %2$slist %2$sown goat</example>
  </command>
  <command identifier="pause"
           implementation="net.robinfriedli.aiode.command.commands.playback.PauseCommand"
           requiresInput="false"
           category="PLAYBACK"
           description="Pause the current playback."/>
  <command identifier="queue"
           implementation="net.robinfriedli.aiode.command.commands.playback.QueueCommand"
           requiresInput="false"
           category="PLAYBACK"
           description="Display the current queue or add a youtube video or playlist, spotify track or playlist, local playlist or any URL to the current queue. Spotify search queries support the Spotify query syntax (i.e. the &quot;artist:&quot;, &quot;album:&quot; and &quot;track:&quot; filters). Which source is used is decided by the used arguments or the default source and default list source properties.">
    <example title="Display the queue widget">%1$squeue</example>
    <example title="Add a specific track from Spotify to the queue">%1$squeue numb</example>
    <example title="Add a track from a specific artist and album">%1$squeue from the inside artist:linkin park album:meteora</example>
    <example title="Add tracks from a local playlist to the queue">%1$squeue %2$slist my list</example>
    <example title="Add tracks from a Spotify playlist to the queue">%1$squeue %2$sspotify %2$slist this is linkin park</example>
    <example title="Add tracks from a Spotify playlist in the current user's library to the queue">%1$squeue %2$slist %2$sspotify %2$sown favs</example>
    <example title="Add a YouTube playlist to the queue">%1$squeue %2$syoutube %2$slist memes</example>
    <example title="Add a YouTube playlist to the queue, showing a selection of 5 results">%1$squeue %2$syoutube %2$slist %2$slimit=5 memes</example>
  </command>
  <command identifier="remove"
           implementation="net.robinfriedli.aiode.command.commands.playlistmanagement.RemoveCommand"
           requiresInput="true"
           category="PLAYLIST_MANAGEMENT"
           description="Remove an item from a local playlist. Put either the full title of the YouTube video or the Spotify track name. If it was a track added by URL from a different source you can either remove it via its title or URL.">
    <argument identifier="from" valueType="java.lang.String" requiresValue="true" description="Mandatory argument to specify the playlist from which to remove the items."/>
    <argument identifier="index" valueType="java.lang.String" description="Remove items by their index. You can also provide an index range like %1$sremove 13-19 %2$sfrom list. This includes starting and end index."/>
    <example title="Remove a Spotify track from a playlist">%1$sremove numb %2$sfrom my list</example>
    <example title="Remove an item added by URL">%1$sremove http://someurl.com/video1 %2$sfrom my list</example>
    <example title="Remove the track at position 3 from a playlist">%1$sremove %2$sindex 3 %2$sfrom my list</example>
    <example title="Remove positions 13 through 19 from a playlist">%1$sremove %2$sindex 13-19 %2$sfrom my list</example>
  </command>
  <command identifier="rename"
           implementation="net.robinfriedli.aiode.command.commands.customisation.RenameCommand"
           requiresInput="true"
           category="CUSTOMISATION"
           description="Change the name of the bot. This name will then be used as the bot's nickname (if the bot has the permission to change it) and can be used as command prefix instead of '$aiode'">
    <example title="Name the bot &quot;Patrice&quot;">%1$srename Patrice</example>
  </command>
  <command identifier="repeat"
           implementation="net.robinfriedli.aiode.command.commands.playback.RepeatCommand"
           requiresInput="false"
           category="PLAYBACK"
           description="Toggles repeat for either the entire queue (repeat %2$sall) or the current track (repeat %2$sone).">
    <argument identifier="one" description="Toggle repeat for the current track.">
      <excludes argument="all"/>
    </argument>
    <argument identifier="all" description="Toggle repeat for all tracks in the queue. This is the default option.">
      <excludes argument="one"/>
    </argument>
    <example title="Repeat the full queue">%1$srepeat</example>
    <example title="Repeat the current track">%1$srepeat %2$sone</example>
  </command>
  <command identifier="rewind"
           implementation="net.robinfriedli.aiode.command.commands.playback.RewindCommand"
           requiresInput="false"
           category="PLAYBACK"
           description="Go back to the previous track in the queue. You can provide a number to rewind more than one track.">
    <example title="Rewind to the previous track in the queue">%1$srewind</example>
    <example title="Rewind 6 tracks">%1$srewind 6</example>
  </command>
  <command identifier="search"
           implementation="net.robinfriedli.aiode.command.commands.search.SearchCommand"
           requiresInput="false"
           category="SEARCH"
           description="Search for YouTube and Spotify tracks or playlists and local playlists or list all local playlists. Spotify search queries support the Spotify query syntax (i.e. the &quot;artist:&quot;, &quot;album:&quot; and &quot;track:&quot; filters). Which source is used is decided by the used arguments or the default source and default list source properties.">
    <!-- <argument identifier="spotify" requiresInput="true" description="Search for Spotify track or playlist. This supports Spotify query syntax (i.e. the filters &quot;artist:&quot;, &quot;album:&quot;, etc.). This is the default option when searching for tracks."> -->
    <!--   <excludes argument="youtube"/> -->
    <!-- </argument> -->
    <argument identifier="youtube" requiresInput="true" description="Search for YouTube video or playlist.">
      <!-- <excludes argument="spotify"/> -->
    </argument>
    <argument identifier="list" description="Search for a playlist."/>
    <argument identifier="local" description="Search for a local playlist or list all of them. This is default when searching for lists.">
      <excludes argument="youtube"/>
      <!-- <excludes argument="spotify"/> -->
      <requires argument="list"/>
    </argument>
    <argument identifier="own" description="Limit search to Spotify tracks or playlists in the current user's library. This requires a Spotify login.">
      <rule errorMessage="Argument 'own' may only be used with Spotify.">command.getSource().isSpotify()</rule>
    </argument>
    <argument identifier="select" valueType="java.lang.Integer" description="Show a selection of YouTube playlists / videos or Spotify tracks to chose from. May be assigned a value from 1 to 20: %2$sselect=5">
      <valueCheck errorMessage="Limit must be between 1 and 20" check="value &gt; 0 &amp;&amp; value &lt;= 20"/>
      <rule errorMessage="Argument 'select' may only be used with YouTube or Spotify.">
        def source = command.getSource();
        source.isYouTube() || source.isSpotify()
      </rule>
    </argument>
    <argument identifier="album" requiresInput="true" description="Search for a Spotify album.">
      <excludes argument="list"/>
      <rule errorMessage="Argument 'album' may only be used with Spotify.">command.getSource().isSpotify()</rule>
    </argument>
    <argument identifier="episode" requiresInput="true" description="Search an episode of a podcast on Spotify. Note that this argument is only required when searching, not when entering a URL.">
      <excludes argument="album"/>
      <excludes argument="list"/>
      <excludes argument="podcast"/>
      <rule errorMessage="Argument 'episode' may only be used with Spotify.">command.getSource().isSpotify()</rule>
    </argument>
    <argument identifier="podcast" requiresInput="true" description="Search a podcast show on Spotify. Note that this argument is only required when searching, not when entering a URL.">
      <excludes argument="album"/>
      <excludes argument="list"/>
      <excludes argument="episode"/>
      <rule errorMessage="Argument 'podcast' may only be used with Spotify.">command.getSource().isSpotify()</rule>
    </argument>
    <argument identifier="market" valueType="java.lang.String" requiresValue="true" description="Specify the ISO 3166-1 country code of the target spotify market. Used to search a Spotify item in a specific country different from the default of this Aiode instance.">
      <rule errorMessage="Argument 'market' may only be used with Spotify.">command.getSource().isSpotify()</rule>
      <rule errorMessage="'%3$s' is not a valid ISO 3166-1 country code">
        try {
          com.neovisionaries.i18n.CountryCode.valueOf(value);
        } catch (IllegalArgumentException e) {
          return false;
        }
        return true;
      </rule>
    </argument>
    <example title="List all local playlists">%1$ssearch %2$slist</example>
    <example title="Search for a specific local list">%1$ssearch %2$slist my list</example>
    <example title="Search for a Spotify track">%1$ssearch %2$sspotify numb artist:linkin park album:meteora</example>
    <example title="Search for a Spotify playlist">%1$ssearch %2$sspotify %2$slist this is linkin park</example>
    <example title="Search for a YouTube playlist">%1$ssearch %2$syoutube %2$slist memes</example>
    <example title="Search for a YouTube playlist, showing a selection of 5 results">%1$ssearch %2$syoutube %2$slist %2$slimit=6 memes</example>
  </command>
  <command identifier="shuffle"
           implementation="net.robinfriedli.aiode.command.commands.playback.ShuffleCommand"
           requiresInput="false"
           category="PLAYBACK"
           description="Toggles shuffle for this guild's queue. This generates a random order in which each track only appears once."/>
  <command identifier="skip"
           implementation="net.robinfriedli.aiode.command.commands.playback.SkipCommand"
           requiresInput="false"
           category="PLAYBACK"
           description="Skip to the next track in the queue or skip the specified amount of tracks. You can provide a number to skip more than one track.">
    <example title="Skip to the next item in the queue">%1$sskip</example>
    <example title="Skip 6 tracks">%1$sskip 6</example>
  </command>
  <command identifier="stop"
           implementation="net.robinfriedli.aiode.command.commands.playback.StopCommand"
           requiresInput="false"
           category="PLAYBACK"
           description="Stop playback and empty the queue."/>
  <!-- <command identifier="upload" -->
  <!--          implementation="net.robinfriedli.aiode.command.commands.spotify.UploadCommand" -->
  <!--          requiresInput="true" -->
  <!--          category="SPOTIFY" -->
  <!--          description="Upload the items from a local list to a new Spotify playlist. This ignores elements that are not Spotify tracks."> -->
  <!--   <example title="Upload playlist &quot;my list&quot;">%1$supload my list</example> -->
  <!-- </command> -->
  <command identifier="permission"
           implementation="net.robinfriedli.aiode.command.commands.general.PermissionCommand"
           requiresInput="false"
           category="GENERAL"
           restrictedAccess="true"
           description="Add or remove a role required to run a certain command or list all commands and who they are available to. By default all commands are available to each user, except for this command and the commands in the scripting category which initially are only available to administrator roles. But as soon as a role has been added only those members with said role can use the command. If you add several roles to one command a member only requires one of those roles. The guild owner or members with administrator roles can always use any command.">
    <argument identifier="to" valueType="java.lang.String" description="Specify the roles to grant access for.">
      <requires argument="grant"/>
    </argument>
    <argument identifier="for" valueType="java.lang.String" description="Specify the roles to remove access privileges from when using the %2$sdeny argument.">
      <excludes argument="to"/>
      <requires argument="deny"/>
    </argument>
    <argument identifier="grant" valueType="java.lang.String" description="Grant the selected commands or other permission targets to the selected roles. Limits the command to the selected roles if no roles were previously defined.">
      <excludes argument="deny"/>
      <rule errorMessage="No commands selected! Either select commands (comma separated) or use the %2$sall or %2$scategory arguments">
        !command.getCommandInput().isBlank() || command.argumentSet("all") || command.argumentSet("category")
      </rule>
    </argument>
    <argument identifier="deny" valueType="java.lang.String" description="Denies a role from using a command or other permission target that has previously been added as a granted role">
      <excludes argument="grant"/>
      <rule errorMessage="No commands selected! Either select commands (comma separated) or use the %2$sall or %2$scategory arguments">
        !command.getCommandInput().isBlank() || command.argumentSet("all") || command.argumentSet("category")
      </rule>
    </argument>
    <argument identifier="clear" description="Clear all restrictions for a command to make it available for everyone.">
      <excludes argument="grant"/>
      <excludes argument="deny"/>
      <rule errorMessage="No commands selected! Either select commands (comma separated) or use the %2$sall or %2$scategory arguments">
        !command.getCommandInput().isBlank() || command.argumentSet("all") || command.argumentSet("category")
      </rule>
    </argument>
    <argument identifier="lock" description="Make the selected commands available only to the guild owner and administrator roles.">
      <excludes argument="grant"/>
      <excludes argument="deny"/>
      <excludes argument="clear"/>
      <rule errorMessage="No commands selected! Either select commands (comma separated) or use the %2$sall or %2$scategory arguments">
        !command.getCommandInput().isBlank() || command.argumentSet("all") || command.argumentSet("category")
      </rule>
    </argument>
    <argument identifier="category" valueType="java.lang.String" description="Manage a category of commands. Use the help command to show all categories.">
      <rule errorMessage="Argument 'category' only applies when granting or denying permissions using the grant, deny, clear or lock arguments.">
        command.argumentSet("grant") ||
        command.argumentSet("deny") ||
        command.argumentSet("clear") ||
        command.argumentSet("lock")
      </rule>
    </argument>
    <argument identifier="all" description="Manage all commands at once. The inline arguments %2$sto and %2$sfor are not required with this argument.">
      <excludes argument="category"/>
      <rule errorMessage="Argument 'all' only applies when granting or denying permissions using the grant, deny, clear or lock arguments.">
        command.argumentSet("grant") ||
        command.argumentSet("deny") ||
        command.argumentSet("clear") ||
        command.argumentSet("lock")
      </rule>
    </argument>
    <argument identifier="create" requiresInput="true" description="Create a new custom permission target that can be granted to roles and checked in scripts using `securityManager.askPermission('myperm', member)`.">
      <excludes argument="grant"/>
      <excludes argument="deny"/>
      <excludes argument="clear"/>
      <excludes argument="category"/>
      <excludes argument="lock"/>
    </argument>
    <argument identifier="delete" requiresInput="true" description="Delete a custom permission target.">
      <excludes argument="grant"/>
      <excludes argument="deny"/>
      <excludes argument="clear"/>
      <excludes argument="category"/>
      <excludes argument="lock"/>
      <excludes argument="create"/>
    </argument>
    <argument identifier="argument" valueType="java.lang.String" description="Manage permissions for a specific argument of a command or all selected commands. If no value is provided this manages all arguments of all selected commands.">
      <excludes argument="create"/>
      <excludes argument="delete"/>
      <rule errorMessage="Argument 'argument' only applies when granting or denying permissions using the grant, deny, clear or lock arguments.">
        command.argumentSet("grant") ||
        command.argumentSet("deny") ||
        command.argumentSet("clear") ||
        command.argumentSet("lock")
      </rule>
    </argument>
    <argument identifier="targets" description="Show all possible permissions that may be granted to roles. Includes all commands and custom targets.">
      <excludes argument="grant"/>
      <excludes argument="deny"/>
      <excludes argument="clear"/>
      <excludes argument="lock"/>
      <excludes argument="create"/>
      <excludes argument="delete"/>
      <excludes argument="argument"/>
    </argument>
    <example title="Add playbackmanager to the roles that can use command play">%1$spermission %2$sgrant play %2$sto playbackmanager</example>
    <example title="Remove playbackmanager from the roles that can use command add">%1$spermission %2$sdeny add %2$sfor playbackmanager</example>
    <example title="Clear all restrictions for command shuffle">%1$spermission %2$sclear shuffle</example>
    <example title="Grant all commands to the manager role">%1$spermission %2$sgrant %2$sall manager</example>
    <example title="Grant all commands in the playback category to role playbackmanager">%1$spermission %2$sgrant %2$scategory playback %2$sto playbackmanager</example>
    <example title="Make command add available to guild owner only">%1$spermission %2$slock add</example>
    <example title="Grant arguments 'list' and 'spotify' of commands 'add' and 'play' to role 'manager'">%1$spermission %2$sgrant add, play %2$sargument list, spotify %2$sto manager</example>
    <example title="Deny role 'rookie' from using any arguments of command 'preset'">%1$spermission %2$sdeny preset %2$sargument %2$sfor rookie</example>
    <example title="Grant all arguments to role 'manager'">%1$spermission %2$sgrant %2$scategory command %2$sargument %2$sto manager</example>
  </command>
  <!-- <command identifier="logout" -->
  <!--          implementation="net.robinfriedli.aiode.command.commands.spotify.LogoutCommand" -->
  <!--          requiresInput="false" -->
  <!--          category="SPOTIFY" -->
  <!--          description="Log out from Spotify."/> -->
  <command identifier="analytics"
           implementation="net.robinfriedli.aiode.command.commands.general.AnalyticsCommand"
           requiresInput="false"
           category="GENERAL"
           description="Show various analytics about this bot."/>
  <command identifier="clear"
           implementation="net.robinfriedli.aiode.command.commands.playback.ClearCommand"
           requiresInput="false"
           category="PLAYBACK"
           description="Clear the current queue of all tracks (except the currently playing track)."/>
  <command identifier="forward"
           implementation="net.robinfriedli.aiode.command.commands.playback.ForwardCommand"
           requiresInput="true"
           category="PLAYBACK"
           description="Skip the given amount of seconds or minutes in the current track.">
    <argument identifier="minutes" valueType="java.lang.Integer" description="Forward the given amount of minutes."/>
    <argument identifier="seconds" valueType="java.lang.Integer" description="Forward the given amount of seconds. This is default.">
      <excludes argument="minutes"/>
    </argument>
    <example title="Forward 110 seconds">%1$sforward 110</example>
    <example title="Forward 2 minutes">%1$sforward %2$sminutes 2</example>
  </command>
  <command identifier="reverse"
           implementation="net.robinfriedli.aiode.command.commands.playback.ReverseCommand"
           requiresInput="true"
           category="PLAYBACK"
           description="Rewind the given amount of seconds or minutes in the current track.">
    <argument identifier="minutes" valueType="java.lang.Integer" description="Reverse the given amount of minutes."/>
    <argument identifier="seconds" valueType="java.lang.Integer" description="Reverse the given amount of seconds. This is default.">
      <excludes argument="minutes"/>
    </argument>
    <example title="Rewind 110 seconds">%1$sreverse 110</example>
    <example title="Rewind 2 minutes">%1$sreverse %2$sminutes 2</example>
  </command>
  <command identifier="volume"
           implementation="net.robinfriedli.aiode.command.commands.playback.VolumeCommand"
           requiresInput="true"
           category="PLAYBACK"
           description="Change the music volume. Enter a value between 1 and 200."/>
  <command identifier="preset"
           implementation="net.robinfriedli.aiode.command.commands.customisation.PresetCommand"
           requiresInput="false"
           category="CUSTOMISATION"
           description="Create or delete a command preset or show all saved presets. Command presets can be used as shortcuts for lengthy commands or creating an alias for a command. Presets han hold one variable marked by &quot;%%s&quot; that may be assigned a value when using the preset. Syntax to create a preset: [preset] %2$sas [name]. Mind that if your preset contains arguments you either need to put the preset in quotation marks or escape the argument prefixes using the escape character '\\'; see the examples for references.">
    <argument identifier="as" valueType="java.lang.String" requiresValue="true" description="Defines the name that will be used to call this preset. This argument is mandatory except when using the delete argument.">
      <excludes argument="delete"/>
    </argument>
    <argument identifier="delete" requiresInput="true" description="Delete an existing preset by its name."/>
    <example title="Create a preset to add a track to your favourite list like: %1$sfav numb">%1$spreset &quot;add %%s %2$sto favs&quot; %2$sas fav</example>
    <example title="Create a preset to play a local list like: %1$spl my list">%1$spreset &quot;play %2$slist %%s&quot; %2$sas pl</example>
    <example title="Create an alias for command forward: %1$sff 20">%1$spreset forward %%s %2$sas ff</example>
    <example title="List all local playlist with one word: %1$slist">%1$spreset search \\%2$slist %2$sas list</example>
    <example title="Create a preset to play one of the current user's Spotify playlists">%1$spreset &quot;play %2$sspotify %2$sown %2$slist %%s&quot; %2$sas psol</example>
    <example title="List all saved presets">%1$spreset</example>
    <example title="Delete a saved preset">%1$spreset %2$sdelete psol</example>
  </command>
  <command identifier="prefix"
           implementation="net.robinfriedli.aiode.command.commands.customisation.PrefixCommand"
           requiresInput="true"
           category="CUSTOMISATION"
           description="Set a custom command prefix. Can be used instead of &quot;$aiode&quot; or the bot name to start a command.">
    <example title="Set the command prefix to &quot;.&quot; to start a command like this: .play numb">%1$sprefix .</example>
  </command>
  <command identifier="move"
           implementation="net.robinfriedli.aiode.command.commands.playlistmanagement.MoveCommand"
           requiresInput="true"
           category="PLAYLIST_MANAGEMENT"
           description="Move one or several items in an aiode playlist to a different index. When moving items down the playlist the items will end up behind the track that is currently at the target index or before when moving items upwards. When entering an index range to move it includes the start and end index. Indices are human, meaning they start at 1. To view full playlists with all indices search the list (%1$ssearch %2$slist my list) and then click the view full list link.">
    <argument identifier="to" valueType="java.lang.String" requiresValue="true" description="Mandatory argument to specify the target index."/>
    <argument identifier="on" valueType="java.lang.String" requiresValue="true" description="Mandatory argument to define the playlist where you want to move the tracks."/>
    <example title="Move the item that is currently at index 5 to index 10">%1$smove 5 %2$sto 10 %2$son my list</example>
    <example title="Move the items that are currently in range 4 - 6 (including start &amp; end) down between the items that are currently at index 10 and 11.">%1$smove 4-6 %2$sto 10 %2$son my list</example>
    <example title="Move the items that are currently in range 14 - 16 (including start &amp; end) up between the items that are currently at index 9 and 10.">%1$smove 14-16 %2$sto 10 %2$son my list</example>
  </command>
  <command identifier="insert"
           implementation="net.robinfriedli.aiode.command.commands.playlistmanagement.InsertCommand"
           requiresInput="true"
           category="PLAYLIST_MANAGEMENT"
           description="Add a track to an aiode playlist. This command is an extension to the add command that inserts the tracks at a specific index within the playlist rather than adding them to the end of the list. This moves all items at and below the specified index down and inserts the new tracks starting at the provided index.">
    <argument identifier="at" valueType="java.lang.Integer" requiresValue="true" description="Mandatory argument to define the index at which to insert the tracks."/>
    <example title="Add tracks to the start of a playlist">%1$sinsert %2$sspotify %2$sown %2$slist goat %2$sto my list %2$sat 1</example>
    <example title="Insert tracks at index 10">%1$sinsert %2$syoutube %2$slist favs %2$sto my list %2$sat 10</example>
  </command>
  <command identifier="property"
           implementation="net.robinfriedli.aiode.command.commands.customisation.PropertyCommand"
           requiresInput="false"
           category="CUSTOMISATION"
           restrictedAccess="true"
           description="List all properties or change the value of a property. Properties are used to customize the bot. For example the &quot;color&quot; property changes the colour theme or &quot;playback notification&quot; changes whether you receive &quot;Now playing...&quot; messages.">
    <argument identifier="toggle" description="Toggles a property with a boolean value (e.g. &quot;playback notification&quot;) to its opposite value"/>
    <argument identifier="set" valueType="java.lang.String" requiresValue="true" description="Set a property to the specified value. E.g. property default source %2$sset youtube.">
      <excludes argument="toggle"/>
    </argument>
    <argument identifier="describe" requiresInput="true" description="Describe what a property does.">
      <excludes argument="toggle"/>
      <excludes argument="set"/>
    </argument>
    <example title="list all properties">%1$sproperty</example>
    <example title="set the color of aiode messages to blue">%1$sproperty color %2$sset blue</example>
    <example title="set the color to Spotify green">%1$sproperty color %2$sset #1DB954</example>
    <example title="toggle playback notifications">%1$sproperty %2$stoggle playback notification</example>
    <example title="set the default service when searching for a track">%1$sproperty default source %2$sset youtube</example>
    <example title="set the default service when searching for a list">%1$sproperty default list source %2$sset local</example>
    <example title="set the argument prefix to '-' to make commands look like this: %1$splay -youtube vid">%1$sproperty argument prefix %2$sset -</example>
    <example title="set the amount of seconds after which success and error messages disappear to 20">%1$sproperty message timeout %2$sset 20</example>
    <example title="disable the automatic removal of success and error messages">%1$sproperty message timeout %2$sset 0</example>
    <example title="set the default text channel to 'bot'">%1$sproperty default channel %2$sset bot</example>
    <example title="describe property 'color'">%1$sproperty %2$sdescribe color</example>
  </command>
  <command identifier="charts"
           implementation="net.robinfriedli.aiode.command.commands.general.ChartsCommand"
           requiresInput="false"
           category="GENERAL"
           description="Shows the most popular tracks and artists for this guild and globally"/>
  <command identifier="abort"
           implementation="net.robinfriedli.aiode.command.commands.general.AbortCommand"
           requiresInput="false"
           category="GENERAL"
           description="Sends all currently running commands an interrupt signal and cancels all queued commands. Not all operations are affected by the interrupt signal but those that actually might take a long time, such as loading a large YouTube playlist, usually are. Use this command carefully as an emergency break if, for example, someone spammed to bot with large commands."/>
  <command identifier="synchronise"
           implementation="net.robinfriedli.aiode.command.commands.playlistmanagement.SynchroniseCommand"
           requiresInput="true"
           category="PLAYLIST_MANAGEMENT"
           description="Synchronise an aiode playlist with an external playlist. In practice this the same as the add command but empties the selected list first.">
    <argument identifier="with" valueType="java.lang.String" description="Specify the local aiode playlist to synchronise the remote playlist with."/>
    <removeArgument identifier="to"/>
    <example title="Sync the contents of an aiode playlist with a YouTube playlist">%1$ssynchronise %2$syoutube %2$slist best of linkin park %2$swith mylist</example>
    <example title="Sync the contents of an aiode playlist with a Spotify playlist">%1$ssynchronise %2$sspotify %2$slist 00s Rock Anthems %2$swith mylist</example>
    <example title="Sync the contents of an aiode playlist with a URL">%1$ssynchronise `https://open.spotify.com/playlist/6XAFuwLF6q9wdGBobd8JPt?si=9upjrtjaSiaLboyKNlBhTQ` %2$swith mylist</example>
  </command>
  <command identifier="empty"
           implementation="net.robinfriedli.aiode.command.commands.playlistmanagement.EmptyCommand"
           requiresInput="true"
           category="PLAYLIST_MANAGEMENT"
           description="Clears an aiode playlist of all items.">
    <example title="Empty the aiode playlist 'favs'">%1$sempty favs</example>
  </command>
  <command identifier="eval"
           implementation="net.robinfriedli.aiode.command.commands.scripting.EvalCommand"
           requiresInput="true"
           category="SCRIPTING"
           restrictedAccess="true"
           description="Evaluate a groovy script. This command simply executes a groovy script and, if not null, prints the result.">
    <argument identifier="privileged" description="Disables the security sandbox when compiling this script. May only be used by bot admins to store and run scripts that use non-whitelisted functions.">
      <rule errorMessage="Argument 'privileged' may only be used by bot admins.">securityManager.isAdmin(user)</rule>
    </argument>
    <example title="Provided variables:">
```css
#context
context for the current command execution

#command
the command instance for this eval command invocation

#messages
an instance of the MessageService class

#guildContext
the GuildContext instance for current guild, derived from context

#playback
the AudioPlayback instance for current guild, derived from context

#guild
the Guild instance (JDA entity) representing the current guild, derived from context

#message
the Message instance (JDA entity) representing the message sent by the user, derived from context

#channel
the MessageChannel instance (JDA entity) representing the channel the message was sent from, derived from context

#member
the Member instance (JDA entity) representing the guild member that sent the message, derived from context

#user
the User instance (JDA entity) representing the user that sent the message, derived from context
```
    </example>
    <example title="Get member count of current guild">```groovy
%1$seval context.guild.members.size()```
    </example>
    <example title="Add reactions to your message, play a Spotify album, answer with the first option and send a message">
```groovy
%1$seval context.message.addReaction(':ok_hand:').submit()
context.message.addReaction(':metal:').submit()
command.run('play \$album meteora')
command.run('answer 0')
context.channel.sendMessage('done').submit()
return null
```
    </example>
    <example title="Send an embed message">```groovy
%1$seval
def embedBuilder = new EmbedBuilder()
embedBuilder.setTitle('Title')
embedBuilder.setDescription('description')
context.channel.sendMessage(embedBuilder.build()).submit()
return null
```
    </example>
    <example title="Enable shuffle if disabled, play a playlist and skip to title 'Numb'">```groovy
%1$seval def playback = context.guildContext.playback
def queue = playback.audioQueue
if (!playback.isShuffle()) {
  command.run('shuffle')
}
command.run('play \$list spotify songs')
while (queue.getCurrent().getTitle() != 'Numb') {
  queue.iterate()
}
command.run('play')
```
    </example>
  </command>
  <command identifier="interceptor"
           implementation="net.robinfriedli.aiode.command.commands.scripting.InterceptorCommand"
           requiresInput="false"
           category="SCRIPTING"
           restrictedAccess="true"
           disableScriptInterceptors="true"
           description="Manage custom command interceptors. A command interceptor is a piece of code that is executed before running each command. Internally they are used to check permissions, parse the command input, check argument rules etc. The groovy scripting sandbox allows you to create additional custom interceptors that are queried and executed by the last interceptor in the chain before the actual command is executed. This command may create a new interceptor, delete an existing interceptor, display an interceptor or list all interceptors. Note that commands executed in scripts via 'command.run()' do not trigger custom command interceptors to avoid cycles. The interceptor and finalizer commands also do not trigger interceptors / finalizers so that malicious interceptors may always be deleted. See the help page for the eval command for available variables.">
    <example title="Create an interceptor that adds an 'ok hand' reaction to each message upon execution">
```groovy
%1$sinterceptor %2$sidentifier="reaction" message.addReaction(':ok_hand:').submit()
```
    </example>
    <example title="Create an interceptor that introduces a chance to get rickrolled when entering a play command. This generates a random number up to 10000 and checks if it is divisible by 33, increase numbers to reduce likeness of rickroll.">
```groovy
%1$sinterceptor %2$sidentifier="rickroll"
"if (command.getIdentifier() == 'play'
  &amp;&amp; !command.getCommandInput().isBlank()) {
def rand = new Random()
// generate random number up to 10000
def i = rand.nextInt(10000)
// check if divisible by 33
if (i %% 33 == 0) {
  // send rickroll message
  messages.sendTemporary('Get rickrolled :clown:', channel)
  // play Rick Astley - Never Gonna Give You Up on youtube
  command.run('play https://www.youtube.com/watch?v=dQw4w9WgXcQ ')
  // uncomment the following line to queue the actual input instead
  // command.run('queue ' + command.getCommandBody())
  // abort the actual command
  command.abort()
  }
}"
```
    </example>
    <example title="Show interceptor 'rickroll'">%1$sinterceptor rickroll</example>
    <example title="List all interceptors">%1$sinterceptor</example>
    <example title="Delete interceptor 'rickroll'">%1$sinterceptor %2$sdelete rickroll</example>
  </command>
  <command identifier="script"
           implementation="net.robinfriedli.aiode.command.commands.scripting.ScriptCommand"
           requiresInput="false"
           category="SCRIPTING"
           restrictedAccess="true"
           description="This command manages persistent scripts for the groovy sandbox. In addition to the variables mentioned by the help page for the eval command, this command offers an 'input' variable to be used in scripts that represents additional user input. Note that scripts can be run directly like normal commands or presets, thus '%1$smyscript myinput' is equivalent to '%1$sscript %2$sinvoke=&quot;myscript&quot; myinput'.">
    <argument identifier="invoke" valueType="java.lang.String" requiresValue="true" description="Specify the identifier of the script you want to execute. Note that scripts can be run directly like normal commands or presets, thus '%1$smyscript myinput' is equivalent to '%1$sscript %2$sinvoke=&quot;myscript&quot;' myinput.">
      <excludes argument="delete"/>
      <excludes argument="identifier"/>
      <excludes argument="activate"/>
      <excludes argument="deactivate"/>
    </argument>
    <argument identifier="privileged" description="Disables the security sandbox when compiling this script. May only be used by bot admins to store and run scripts that use non-whitelisted functions.">
      <rule errorMessage="Argument 'privileged' may only be used by bot admins.">securityManager.isAdmin(user)</rule>
      <rule errorMessage="Argument 'privileged' may only be used when invoking a script or compiling a new script.">command.argumentSet("invoke") || (command.argumentSet("identifier") &amp;&amp; !command.getCommandInput().isBlank()) || command.script != null</rule>
    </argument>
    <example title="Create a script that adds a reaction to the command message, searches the album 'Meteora' and plays the first result">
```groovy
%1$sscript %2$sidentifier="meteora"
"message.addReaction(':metal:').submit()
command.run('play %2$salbum meteora')
command.run('answer 0')"
```
    </example>
    <example title="Create a script that enables shuffle if disabled">
```groovy
%1$sscript %2$sidentifier="enableShuffle" if (!playback.isShuffle()) command.run('shuffle')
```
    </example>
    <example title="Create a script that skips to the specified track name in the queue (checking queue.hasNext with ignoreRepeat = true to avoid infinite loop)">
```groovy
%1$sscript %2$sidentifier="skipTo"
"def queue = playback.audioQueue
if (queue.isEmpty()) {
  return null
}
def target = input.toLowerCase()
while (queue.getCurrent().title().toLowerCase() != target) {
  if (!queue.hasNext(true)) {
    messages.sendError(String.format('Could not find %%s in upcoming tracks', input), channel)
    break
  }
  queue.iterate()
}
command.run('play')"
```
    </example>
    <example title="Show script 'meteora'">%1$sscript meteora</example>
    <example title="List all scripts">%1$sscript</example>
    <example title="Delete script 'meteora'">%1$sscript %2$sdelete meteora</example>
    <example title="Run script 'myscript' with input 'myinput' using a custom dynamic argument 'myarg'.">%1$smyscript %2$smyarg myinput</example>
    <example title="Run script 'skipTo' with input 'Numb'; this is equivalent to typing '%1$sskipTo Numb'">%1$sscript %2$sinvoke="skipTo" Numb</example>
  </command>
  <command identifier="finalizer"
           implementation="net.robinfriedli.aiode.command.commands.scripting.FinalizerCommand"
           requiresInput="false"
           category="SCRIPTING"
           restrictedAccess="true"
           disableScriptInterceptors="true"
           description="Creates and manages script interceptors that are executed after the command finished successfully. If the command runs into an error finalizers are not executed. Essentially &quot;finalizers&quot; are just interceptors that are queried and executed by a different internal interceptor that runs after the one that executes the command. Like the interceptor command running this command will not trigger custom command interceptors / finalizers. For more about interceptors see the help page for the interceptor command.">
    <example title="Create a finalizer that deletes the command message after the command completes">
```groovy
%1$sfinalizer %2$sidentifier="deleteMessage" message.delete().submit()
```
    </example>
    <example title="Show finalizer 'deleteMessage'">%1$sfinalizer deleteMessage</example>
    <example title="List all finalizers">%1$sfinalizer</example>
    <example title="Delete finalizer 'deleteMessage'">%1$sfinalizer %2$sdelete deleteMessage</example>
  </command>
  <command identifier="connect"
           implementation="net.robinfriedli.aiode.command.commands.web.ConnectCommand"
           category="WEB"
           requiresInput="false"
           description="Connect a web client. After using this command you can DM me the token provided by the web client. This will prepare a session connected to this guild and user enabling the client to connect via the token.">
    <example title="Prepare a session based on this guild and user">%1$sconnect</example>
  </command>

  <!-- Administrator commands -->
  <command identifier="reboot"
           implementation="net.robinfriedli.aiode.command.commands.admin.RebootCommand"
           requiresInput="false"
           category="ADMIN"
           description="Restarts the bot">
    <argument identifier="silent" description="Disables alerting active guilds about the restart."/>
    <argument identifier="await" valueType="java.lang.Integer" description="The maximum amount of seconds to wait for pending actions to complete.">
      <valueCheck errorMessage="Maximum value is 600" check="value &lt;= 600"/>
      <valueCheck errorMessage="Value needs to be 0 or greater" check="value &gt;= 0"/>
    </argument>
  </command>
  <command identifier="quit"
           implementation="net.robinfriedli.aiode.command.commands.admin.QuitCommand"
           requiresInput="false"
           category="ADMIN"
           description="Stops the bot">
    <argument identifier="silent" description="Disables alerting active guilds about the shutdown."/>
    <argument identifier="await" valueType="java.lang.Integer" description="The maximum amount of seconds to wait for pending actions to complete.">
      <valueCheck errorMessage="Maximum value is 600" check="value &lt;= 600"/>
      <valueCheck errorMessage="Value needs to be 0 or greater" check="value &gt;= 0"/>
    </argument>
  </command>
  <command identifier="update"
           implementation="net.robinfriedli.aiode.command.commands.admin.UpdateCommand"
           requiresInput="false"
           category="ADMIN"
           description="Update the bot if the current branch needs to be rebased. Performs a rebase and maven clean install if necessary. A restart might be required if an update was pulled."/>
  <command identifier="load document"
           slashCommandIdentifier="load-document"
           implementation="net.robinfriedli.aiode.command.commands.admin.LoadDocumentCommand"
           requiresInput="false"
           category="ADMIN"
           description="Load a document from the embedDocuments or list them."/>
  <command identifier="cleandb"
           implementation="net.robinfriedli.aiode.command.commands.admin.CleanDbCommand"
           requiresInput="false"
           category="ADMIN"
           description="Deletes data associated with guilds the bot is no longer a part of. Discord listeners will be suspended during that time.">
    <argument identifier="silent" description="Disables alerting active guilds about the cleanup and associated suspension."/>
  </command>
  <command identifier="garbage collect"
           slashCommandIdentifier="garbage-collect"
           implementation="net.robinfriedli.aiode.command.commands.admin.GarbageCollectCommand"
           requiresInput="false"
           category="ADMIN"
           description="Executes a Java garbage collection to manually clean up memory when convenient"/>
  <command identifier="youtube quota"
           slashCommandIdentifier="youtube-quota"
           implementation="net.robinfriedli.aiode.command.commands.admin.YouTubeQuotaCommand"
           requiresInput="false"
           category="ADMIN"
           description="Displays the current calculated usage of the daily YouTube API quota."/>
  <command identifier="simulate audio traffic"
           slashCommandIdentifier="simulate-audio-traffic"
           implementation="net.robinfriedli.aiode.command.commands.admin.AudioTrafficSimulationCommand"
           requiresInput="false"
           category="ADMIN"
           description="Spawns a specified amount of fake audio players to simulate higher audio traffic. If the nativeBuffer argument is used this creates a NativeAudioSendSystem for each stream to populate the native jda-nas buffer and send the packets to the local loopback address, else this spawns a Thread for each stream to poll the AudioTrack continuously.">
    <argument identifier="streams" requiresValue="true" valueType="java.lang.Integer" description="Specify the number of fake audio streams to spawn, defaults to 200.">
      <valueCheck errorMessage="Number of streams needs to be greater than 0" check="value &gt; 0"/>
    </argument>
    <argument identifier="duration" requiresValue="true" valueType="java.lang.Integer" description="Specify the amount of seconds the fake audio streams run for, defaults to 300.">
      <valueCheck errorMessage="Duration needs to be greater than 0" check="value &gt; 0"/>
    </argument>
    <argument identifier="url" requiresValue="true" valueType="java.lang.String" description="The URL of the track to use for all fake audio streams. Simply uses the first track if several tracks are found. The track is repeated until the duration limit is reached."/>
    <argument identifier="nativeBuffer" requiresValue="true" valueType="java.lang.Integer" description="The buffer duration for jda-nas in milliseconds. If the argument is not set, jda-nas isn't used and the AudioPlayer is simply polled without doing anything with the returned frames.">
      <valueCheck errorMessage="nativeBuffer needs to be greater than 0" check="value &gt; 0"/>
    </argument>
    <argument identifier="delay" requiresValue="true" valueType="java.lang.Integer" description="The delay between each player in seconds. If 0 all players start immediately, defaults to 3 seconds.">
      <valueCheck errorMessage="delay needs to be equal to or greater than 0" check="value &gt;= 0"/>
    </argument>
  </command>

  <!-- abstract super commands -->
  <abstractCommand class="net.robinfriedli.aiode.command.commands.AbstractPlayableLoadingCommand">
    <argument identifier="list" requiresInput="true" description="Search for a youtube, spotify or aiode playlist. Note that this argument is only required when searching, not when entering a URL."/>
    <argument identifier="spotify" requiresInput="true" description="Search for a Spotify track, list or album. This supports Spotify query syntax (i.e. the filters &quot;artist:&quot;, &quot;album:&quot;, etc.). Note that this argument is only required when searching, not when entering a URL.">
      <excludes argument="youtube"/>
      <excludes argument="soundcloud"/>
    </argument>
    <argument identifier="youtube" requiresInput="true" description="Search a YouTube video or playlist. Note that this argument is only required when searching, not when entering a URL.">
      <excludes argument="spotify"/>
      <excludes argument="soundcloud"/>
    </argument>
    <argument identifier="own" requiresInput="true" description="Limit search to Spotify tracks, lists or albums that are in the current user's library. This requires a Spotify login.">
      <rule errorMessage="Argument 'own' may only be used with Spotify.">command.getSource().isSpotify()</rule>
    </argument>
    <argument identifier="local" description="Search for a local aiode playlist.">
      <excludes argument="spotify"/>
      <excludes argument="youtube"/>
      <requires argument="list"/>
    </argument>
    <argument identifier="album" requiresInput="true" description="Search for a Spotify album. Note that this argument is only required when searching, not when entering a URL.">
      <excludes argument="list"/>
      <excludes argument="episode"/>
      <excludes argument="podcast"/>
      <rule errorMessage="Argument 'album' may only be used with Spotify.">command.getSource().isSpotify()</rule>
    </argument>
    <argument identifier="select" valueType="java.lang.Integer" requiresInput="true" description="Show a selection of YouTube playlists / videos or Spotify tracks to chose from. May be assigned a value from 1 to 20: %2$sselect=5">
      <valueCheck errorMessage="Limit must be between 1 and 20" check="value &gt; 0 &amp;&amp; value &lt;= 20"/>
      <rule errorMessage="Argument 'select' may only be used with YouTube or Spotify.">
        def source = command.getSource();
        source.isYouTube() || source.isSpotify()
      </rule>
    </argument>
    <argument identifier="soundcloud" requiresInput="true" description="Search a track on soundcloud. Note that this argument is only required when searching, not when entering a URL.">
      <excludes argument="spotify"/>
      <excludes argument="youtube"/>
      <excludes argument="list" message="Cannot search for soundcloud playlists."/>
    </argument>
    <argument identifier="episode" requiresInput="true" description="Search an episode of a podcast on Spotify. Note that this argument is only required when searching, not when entering a URL.">
      <excludes argument="album"/>
      <excludes argument="list"/>
      <excludes argument="podcast"/>
      <rule errorMessage="Argument 'episode' may only be used with Spotify.">command.getSource().isSpotify()</rule>
    </argument>
    <argument identifier="podcast" requiresInput="true" description="Search a podcast on Spotify. Note that this argument is only required when searching, not when entering a URL.">
      <excludes argument="album"/>
      <excludes argument="list"/>
      <excludes argument="episode"/>
      <rule errorMessage="Argument 'podcast' may only be used with Spotify.">command.getSource().isSpotify()</rule>
    </argument>
    <argument identifier="market" requiresValue="true" valueType="java.lang.String" description="Specify the ISO 3166-1 country code of the target spotify market. Used to search a Spotify item in a specific country different from the default of this Aiode instance.">
      <rule errorMessage="Argument 'market' may only be used with Spotify.">command.getSource().isSpotify()</rule>
      <rule errorMessage="'%3$s' must be a valid ISO 3166-1 country code">
        try {
        com.neovisionaries.i18n.CountryCode.valueOf(value);
        } catch (IllegalArgumentException e) {
        return false;
        }
        return true;
      </rule>
    </argument>
  </abstractCommand>
  <abstractCommand class="net.robinfriedli.aiode.command.commands.AbstractQueueLoadingCommand">
    <argument identifier="preview" requiresInput="true" description="Load the short preview mp3 directly from Spotify instead of the full track from YouTube.">
      <rule errorMessage="Argument 'preview' may only be used with Spotify.">
        def source = command.getSource();
        if (command.argumentSet("list")) {
          source.isSpotify() || source.isLocal()
        }

        source.isSpotify()
      </rule>
    </argument>
  </abstractCommand>
  <abstractCommand class="net.robinfriedli.aiode.command.commands.scripting.AbstractScriptCommand">
    <argument identifier="delete" description="Specify a script / interceptor identifier to delete">
      <rule errorMessage="Target script to delete must be specified either as command input or using the identifier argument">!command.getCommandInput().isBlank() || command.argumentSet("identifier")</rule>
    </argument>
    <argument identifier="identifier" valueType="java.lang.String" requiresValue="true" description="Define the name of the script / interceptor when creating a new script. E.g. '%2$sidentifier=&quot;myscript&quot;'. Optionally can also be used to specify the target script instead of the command input when deleting / activating / deactivating a script."/>
    <argument identifier="activate" description="Active a deactivated script / interceptor / finalizer. Deactivated scripts can not be executed and deactivated interceptors / finalizers are ignored when running commands.">
      <excludes argument="delete"/>
      <excludes argument="deactivate"/>
      <rule errorMessage="Target script to activate must be specified either as command input or using the identifier argument">!command.getCommandInput().isBlank() || command.argumentSet("identifier")</rule>
    </argument>
    <argument identifier="deactivate" description="Deactivate an active script / interceptor / finalizer. Deactivated scripts can not be executed and deactivated interceptors / finalizers are ignored when running commands.">
      <excludes argument="delete"/>
      <excludes argument="activate"/>
      <rule errorMessage="Target script to deactivate must be specified either as command input or using the identifier argument">!command.getCommandInput().isBlank() || command.argumentSet("identifier")</rule>
    </argument>
  </abstractCommand>
  <abstractCommand class="net.robinfriedli.aiode.command.AbstractCommand">
    <argument identifier="skipInterceptors" description="Disable script interceptors and finalizers for the execution of this command."/>
    <argument identifier="input" valueType="java.lang.String" description="The input for the command, e.g. the track name or other search query."/>
  </abstractCommand>
</commands>
